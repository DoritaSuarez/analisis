for(i in temp){
if(i %in% nig){
print("pf")
}else{
tempen = iconv("Ã", i , to = "UTF-8")
print(tempen)
}
}
i
nig = c("CP-GR", "CP-IS", "cp1025")
for(i in temp){
if(i %in% nig){
print("pf")
}else{
tempen = iconv("Ã", i , to = "UTF-8")
print(tempen)
}
}
i
nig = c("CP-GR", "CP-IS", "cp1025", "CP1125")
for(i in temp){
if(i %in% nig){
print("pf")
}else{
tempen = iconv("Ã", i , to = "UTF-8")
print(tempen)
}
}
i
for(i in 1:length(temp)){
if(i %in% nig){
print("pf")
}else{
tempen = iconv("Ã", temp[i] , to = "UTF-8")
print(tempen)
}
}
yi
i
temp[-c(25:40)]
temp <- temp[-c(25:40)]
for(i in 1:length(temp)){
if(i %in% nig){
print("pf")
}else{
tempen = iconv("Ã", temp[i] , to = "UTF-8")
print(tempen)
}
}
i
temp <- temp[-c(25:50)]
i
for(i in 1:length(temp)){
if(i %in% nig){
print("pf")
}else{
tempen = iconv("Ã", temp[i] , to = "UTF-8")
print(tempen)
}
}
i
for(i in 1:length(temp)){
if(i %in% nig){
print("pf")
}else{
tempen = iconv("Ã", temp[i] , to = "UTF-8")
print(tempen)
}
}
temp <- temp[-c(25:90)]
temp <- temp[-c(25:90)]
for(i in 1:length(temp)){
if(i %in% nig){
print("pf")
}else{
tempen = iconv("Ã", temp[i] , to = "UTF-8")
print(tempen)
}
}
temp <- temp[-c(0:90)]
for(i in 1:length(temp)){
if(i %in% nig){
print("pf")
}else{
tempen = iconv("Ã", temp[i] , to = "UTF-8")
print(tempen)
}
}
temp <- temp[-c(0:125)]
for(i in 1:length(temp)){
if(i %in% nig){
print("pf")
}else{
tempen = iconv("Ã", temp[i] , to = "UTF-8")
print(tempen)
}
}
temp <- temp[-c(0:150)]
for(i in 1:length(temp)){
if(i %in% nig){
print("pf")
}else{
tempen = iconv("Ã", temp[i] , to = "UTF-8")
print(tempen)
}
}
temp <- temp[-c(0:200)]
for(i in 1:length(temp)){
if(i %in% nig){
print("pf")
}else{
tempen = iconv("Ã", temp[i] , to = "UTF-8")
print(tempen)
}
}
temp = iconvlist()
temp <- temp[-c(0:150)]
for(i in 1:length(temp)){
if(i %in% nig){
print("pf")
}else{
tempen = iconv("Ã", temp[i] , to = "UTF-8")
print(tempen)
}
}
temp <- temp[-c(0:160)]
for(i in 1:length(temp)){
if(i %in% nig){
print("pf")
}else{
tempen = iconv("Ã", temp[i] , to = "UTF-8")
print(tempen)
}
}
temp <- temp[-c(0:170)]
for(i in 1:length(temp)){
if(i %in% nig){
print("pf")
}else{
tempen = iconv("Ã", temp[i] , to = "UTF-8")
print(tempen)
}
}
temp = iconvlist()
for(i in 1:length(temp)){
if(i %in% nig){
print("pf")
}else{
tempen = iconv("Ã", temp[i] , to = "UTF-8")
print(tempen)
}
}
temp <- temp[-c(0:170)]
temp = iconvlist()
for(i in 1:length(temp)){
tempen = iconv("Ã", temp[i] , to = "UTF-8")
print(tempen)
}
temp <- temp[-c(0:170)]
length(temp)
Texto Texto <http://www.ujaveriana.edu>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
data())
data()
head(iris)
modelo <- lm(Sepal.Width ~ Petal.Length)
modelo <- lm(Sepal.Width ~ Petal.Length, data = iris)
modelo <- lm(Sepal.Width ~ Petal.Length, data = iris)
summary(modelo)
plot(iris$Sepal.Width, iris$Petal.Length)
# Preprocesamiento intensivo perron
library(ggplot2)
names(iris)
p1 + geom_point()
p1 <- ggplot(iris, aes(x = Sepal.Width, y = Petal.Length, fill = Species))
p1 + geom_point()
p1 <- ggplot(iris, aes(x = Sepal.Width, y = Petal.Length, group = Species))
p1 + geom_point()
p1 <- ggplot(iris, aes(x = Sepal.Width, y = Petal.Length, color = Species))
p1 + geom_point()
modelo <- lm(Sepal.Width ~ Petal.Length + Species, data = iris)
summary(modelo)
modelo <- lm(Sepal.Width ~ Petal.Length, data = iris)
summary(modelo)
modelo <- lm(Sepal.Width ~ Petal.Length + Species, data = iris)
summary(modelo)
subase <- subset(iris, Species != "setosa" )
subase
t.test(iris$Sepal.Width ~ iris$Species)
subase$Species %>% levels()
library(dplyr)
subase$Species %>% levels()
subase$Species <- as.character(subase$Species)
t.test(iris$Sepal.Width ~ iris$Species)
as.character(subase$Species)
subase$Species <- as.character(subase$Species) %>% as.factor()
t.test(iris$Sepal.Width ~ iris$Species)
t.test(iris$Sepal.Width)
t.test(subase$Sepal.Width ~ subase$Species)
prop.test(206, 500)
data("AirPassengers")
AirPassengers
# geom_line() is suitable for time series
ggplot(economics, aes(date, unemploy)) + geom_line()
ggplot(economics_long, aes(date, value01, colour = variable)) +
geom_line()
rm(list=ls())
library(ggplot2)
library(dplyr)
library(DataExplorer)
library(plotly)
library(tidyverse)
library(FactoMineR)
library(readxl)
library(corrplot)
library(ggcorrplot)
library(reshape2)
setwd("C:/Users/diant/Documents/deproyectos-Cauca/Bases/Análisis/Src")
source("preprocesamiento.R", encoding = "UTF-8")
# Funciones ---------------------------------------------------------------
calculador_frecuencias <- function(nombre_var){
df_temp = df_actividades[df_actividades[,nombre_var] == 1, ]
df_abs <- df_temp %>% apply(., 2, sum)
df_rel <- round(df_abs/df_abs[nombre_var]*100, 1)
return(list(abs = df_abs, rel = df_rel))
}
# Actividades principales -------------------------------------------------
df_actividades <- df_hogares %>% select(starts_with(c("P02")))
df_actividades <- apply(df_actividades, 2, transformacion_faltantes) %>% data.frame()  %>% .[, 1:9] %>% data_frame()
names(df_actividades) <- c("Agricultura", "Ganaderia","Especies Menores", "Pesca", "Otras Pecuarias", "Forestal", "Minería", "Comercio", "Otras actividades")
# Distribución de las actividades principales
df_act = melt(df_actividades, id.vars = NULL)
resumen_actividades <- df_act %>% group_by(variable, value) %>%
summarise(conteo = n()) %>%
mutate(porcentaje = conteo/sum(conteo)) %>%
arrange(porcentaje, variable)
resumen_actividades$value = ifelse(resumen_actividades$value == 1, "Si", "No")
names(resumen_actividades)[2] <- "Actividades"
resumen_actividades %>% ggplot(aes(x=reorder(variable, desc(porcentaje)), y = porcentaje, fill = Actividades))+geom_col()
# resumen_actividades <- resumen_actividades %>% arrange(variable, porcentaje)
resumen_actividades["pos"] <- NA
for(i in 1:nrow(resumen_actividades)){
x = resumen_actividades[i, "porcentaje"]
act = resumen_actividades[i, "Actividades"]
resumen_actividades[i, "pos"] = ifelse(act == "Si", x*100/2, (1-x+x/2)*100)
}
act_g1 <- ggplot(resumen_actividades, aes(x = forcats::fct_reorder(variable, as.numeric(porcentaje), fun = mean), y = porcentaje*100, fill = Actividades))
act_g1 + geom_bar(stat = "identity") +
xlab("Actividad") +
ylab("Porcentaje") +
scale_fill_manual("Actividad", values = c("No" = "#8CBD0E", "Si" = "#005117")) + coord_flip()
# geom_text(data=resumen_actividades, aes(y = pos,
# label = paste0(round(porcentaje*100),"%")), size=3)+coord_flip()
# Calculo de correlaciones entre las variables binarias generadas y respectivo gráfico
correlaciones <-  df_actividades[, 1:9] %>% apply(., 2, transformacion_faltantes) %>% data_frame() %>% cor()
corrplot(correlaciones, method = "color")
# Se calculan las frecuencias relativas y absolutas para cada una de las actividades principales que reportan los hogares
df_relativas <- data.frame()
df_absolutas <- data.frame()
for(i in 1:ncol(df_actividades)){
df_relativas <- rbind(df_relativas, calculador_frecuencias(names(df_actividades)[i])$rel)
df_absolutas <- rbind(df_absolutas, calculador_frecuencias(names(df_actividades)[i])$abs)
}
names(df_absolutas) <- names(df_actividades)
names(df_relativas) <- names(df_actividades)
row.names(df_absolutas) <- names(df_actividades)
row.names(df_relativas) <- names(df_relativas)
df_relativas[, "Actividad"] <- names(df_relativas)
df_absolutas[, "Actividad"] <- names(df_absolutas)
# Se organizan los datos de forma que puedan ser procesados por ggplot
plotDat_rel <- gather(df_relativas, key = "Actividad1", value = "Porcentaje", -Actividad)
plotDat_abs <- gather(df_absolutas, key = "Actividad1", value = "Conteo", -Actividad)
ggplot(plotDat_rel, aes(Actividad1, Actividad, col = Porcentaje, fill = Porcentaje, label = paste0(Porcentaje, "%"))) +
geom_tile() +
geom_text(col = "#073482") +
theme_minimal() +
scale_fill_gradient2(low = "#FAFA00", mid = "#E8E6E8", high = "#00CDDB") +
scale_color_gradient2(low = "#FAFA00", mid = "#E8E6E8", high = "#00CDDB")
ggplot(plotDat_abs, aes(Actividad1, Actividad, col = Conteo, fill = Conteo, label = Conteo)) +
geom_tile() +
geom_text(col = "#073482") +
theme_minimal() +
scale_fill_gradient2(low = "#FAFA00", mid = "#E8E6E8", high = "#00CDDB") +
scale_color_gradient2(low = "#FAFA00", mid = "#E8E6E8", high = "#00CDDB")
# ¿ que actividad proviene el sustento del hogar?
docs <- Corpus(VectorSource(c(df_hogares$P02ICUAL, df_hogares$P02JCUAL)))
# Text Mining
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
# ¿ que actividad proviene el sustento del hogar?
docs <- Corpus(VectorSource(c(df_hogares$P02ICUAL, df_hogares$P02JCUAL)))
docs
c(df_hogares$P02ICUAL, df_hogares$P02JCUAL)
# ¿ que actividad proviene el sustento del hogar?
docs <- Corpus(VectorSource(c(df_hogares$P02ICUAL, df_hogares$P02JCUAL) %>% na.omit()))
docs
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("spanish"))
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
# ¿ que actividad proviene el sustento del hogar?
docs <- Corpus(VectorSource(c(df_hogares$P02ICUAL) %>% na.omit()))
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("spanish"))
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
# ¿ que actividad proviene el sustento del hogar?
docs <- Corpus(VectorSource(c(df_hogares$P02JCUAL) %>% na.omit()))
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("spanish"))
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
# ¿ que actividad proviene el sustento del hogar?
docs <- Corpus(VectorSource(c(df_hogares$P02JCUAL) %>% na.omit()))
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("spanish"))
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
# ¿ que actividad proviene el sustento del hogar?
docs <- Corpus(VectorSource(c(df_hogares$P02ICUAL, df_hogares$P02JCUAL) %>% na.omit() ))
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("spanish"))
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
resumen_actividades
df_actividades
apply(df_actividades, 1, sum)
apply(df_actividades, 1, sum) %>% table()
apply(df_actividades, 1, sum) %>% table()/length()
apply(df_actividades, 1, sum) %>% table()/length(.)
apply(df_actividades, 1, sum) %>% table() %>% ./sum(.)
actividades <- apply(df_actividades, 1, sum) %>% table()
actividades
actividades <- data_frame(actividades = names(actividades), hogares = actividades)
actividades
numero_actividades <- data_frame(df_actividades, df_hogares$CLASE, df_hogares$Nombre)
numero_actividades
numero_actividades %>% View()
numero_actividades$Clase <- factor(numero_actividades$Clase)
levels(numero_actividades$Clase) <- c("Cabecera", "Corregimiento", "Rural")
numero_actividades
numero_actividades %>% names()
numero_actividades <- data_frame(df_actividades, Clase = df_hogares$CLASE, Tramo = df_hogares$Nombre)
numero_actividades$Clase <- factor(numero_actividades$Clase)
levels(numero_actividades$Clase) <- c("Cabecera", "Corregimiento", "Rural")
numero_actividades %>% melt(Clase, Nombre)
numero_actividades %>% melt(id.vars = c(Clase, Nombre))
numero_actividades %>% melt(id.vars = c("Clase", "Nombre"))
numero_actividades %>% melt("Clase", "Tramo")
numero_actividades %>% group_by(Clase, Tramo)
numero_actividades %>% group_by(Clase, Tramo) %>% melt()
numero_actividades_grap <- numero_actividades %>% group_by(Clase, Tramo) %>% melt()
numero_actividades_grap
numero_actividades_grap <- numero_actividades %>% group_by(Clase, Tramo) %>% melt() %>% data_frame()
numero_actividades_grap
numero_actividades_grap$value = factor(numero_actividades_grap$value)
levels(numero_actividades_grap$value)
levels(numero_actividades_grap$value) = c("No", "Si")
numero_actividades_grap %>% group_by(Clase, Tramo, Variable, value) %>% count()
numero_actividades_grap %>% group_by(Clase, Tramo, variable, value) %>% count()
numero_actividades_grap <- numero_actividades_grap %>% group_by(Clase, Tramo, variable, value) %>% count()
numero_actividades_grap
ggplot(numero_actividades_grap, aes(x = variable, y = n, fill = Clase)) + geom_bar() + facet_grid(cols = vars(Tramo))
ggplot(numero_actividades_grap, aes(x = variable, y = n, fill = Clase)) + geom_bar(stat="identity") + facet_grid(cols = vars(Tramo))
numero_actividades_grap[, "Porcentaje"] <- numero_actividades$n / sum(numero_actividades$n) * 100
numero_actividades_grap[, "Porcentaje"] <- numero_actividades_grap$n / sum(numero_actividades_grap$n) * 100
numero_actividades_grap
numero_actividades_grap[, "Porcentaje"] <- (numero_actividades_grap$n / sum(numero_actividades_grap$n)) * 100
numero_actividades_grap
numero_actividades_grap <- numero_actividades_grap %>%
group_by(Clase, Tramo, variable, value) %>%
summarise(conteo = n()) %>%
mutate(porcentaje = conteo/sum(conteo)) %>%
arrange(porcentaje, variable)
numero_actividades_grap
numero_actividades_grap <- numero_actividades_grap %>%
group_by(Clase, Tramo, variable) %>%
summarise(conteo = n()) %>%
mutate(porcentaje = conteo/sum(conteo)) %>%
arrange(porcentaje, variable)
numero_actividades_grap
numero_actividades
numero_actividades_grap
numero_actividades
numero_actividades_grap <- numero_actividades_grap %>%
group_by(Clase, Tramo, variable) %>%
summarise(conteo = n())
numero_actividades_grap
numero_actividades <- data_frame(df_actividades, Clase = df_hogares$CLASE, Tramo = df_hogares$Nombre)
numero_actividades$Clase <- factor(numero_actividades$Clase)
levels(numero_actividades$Clase) <- c("Cabecera", "Corregimiento", "Rural")
numero_actividades_grap <- numero_actividades %>% group_by(Clase, Tramo) %>% melt() %>% data_frame()
numero_actividades_grap$value = factor(numero_actividades_grap$value)
levels(numero_actividades_grap$value) = c("No", "Si")
numero_actividades_grap <- numero_actividades_grap %>%
group_by(Clase, Tramo, variable) %>%
summarise(conteo = n())
resumen_actividades <- df_act %>% group_by(variable, value) %>%
summarise(conteo = n()) %>%
mutate(porcentaje = conteo/sum(conteo)) %>%
arrange(porcentaje, variable)
resumen_actividades
df_act
numero_actividades_grap
numero_actividades <- data_frame(df_actividades, Clase = df_hogares$CLASE, Tramo = df_hogares$Nombre)
numero_actividades$Clase <- factor(numero_actividades$Clase)
levels(numero_actividades$Clase) <- c("Cabecera", "Corregimiento", "Rural")
numero_actividades
numero_actividades_grap <- numero_actividades %>% group_by(Clase, Tramo) %>% melt() %>% data_frame()
numero_actividades_grap
numero_actividades_grap$value = factor(numero_actividades_grap$value)
levels(numero_actividades_grap$value) = c("No", "Si")
resumen_actividades <- numero_actividades_grap %>% group_by(Clase, Tramo, Variable, value) %>%
summarise(conteo = n()) %>%
mutate(porcentaje = conteo/sum(conteo)) %>%
ggplot(numero_actividades_grap, aes(x = variable, y = n, fill = Clase)) + geom_bar(stat="identity") + facet_grid(cols = vars(Tramo))
resumen_actividades <- numero_actividades_grap %>% group_by(Clase, Tramo, variable, value) %>%
summarise(conteo = n()) %>%
mutate(porcentaje = conteo/sum(conteo)) %>%
ggplot(numero_actividades_grap, aes(x = variable, y = n, fill = Clase)) + geom_bar(stat="identity") + facet_grid(cols = vars(Tramo))
resumen_actividades <- numero_actividades_grap %>% group_by(Clase, Tramo, variable, value) %>%
summarise(conteo = n()) %>%
mutate(porcentaje = conteo/sum(conteo))
resumen_actividades
resumen_actividades <- numero_actividades_grap %>% group_by(Clase, Tramo, variable) %>%
summarise(conteo = n()) %>%
mutate(porcentaje = conteo/sum(conteo))
resumen_actividades
resumen_actividades <- numero_actividades_grap %>% group_by(Clase, Tramo, variable, value) %>%
summarise(conteo = n()) %>%
mutate(porcentaje = conteo/sum(conteo))
resumen_actividades
resumen_actividades <- numero_actividades_grap %>% group_by(Clase, Tramo, variable, value) %>%
summarise(conteo = n())
resumen_actividades
resumen_actividades %>% group_by(value) %>% mutate(algo = sum(conteo))
resumen_actividades %>% group_by(Clase, Tramo, variable, value) %>% mutate(algo = sum(conteo))
resumen_actividades %>% group_by(Clase, Tramo, variable) %>% mutate(algo = sum(conteo))
resumen_actividades %>% group_by(Clase, Tramo, variable) %>% mutate(algo = sum(conteo)) %>% View()
resumen_actividades <- numero_actividades_grap %>% group_by(Clase, Tramo, variable, value) %>%
summarise(conteo = n()) %>%
resumen_actividades <- resumen_actividades %>% group_by(Clase, Tramo, variable) %>% mutate(conteoC = sum(conteo)) %>% mutate(porcentaje = conteo/conteoC*100)
resumen_actividades <- numero_actividades_grap %>% group_by(Clase, Tramo, variable, value) %>%
summarise(conteo = n()) %>%
resumen_actividades %>% group_by(Clase, Tramo, variable) %>% mutate(conteoC = sum(conteo)) %>% mutate(porcentaje = conteo/conteoC*100)
resumen_actividades <- numero_actividades_grap %>% group_by(Clase, Tramo, variable, value) %>%
summarise(conteo = n()) %>%
resumen_actividades %>% group_by(Clase, Tramo, variable) %>% mutate(conteoC = sum(conteo)) %>% mutate(porcentaje = conteo/conteoC*100)
resumen_actividades <- numero_actividades_grap %>% group_by(Clase, Tramo, variable, value) %>%
summarise(conteo = n())
resumen_actividades %>% group_by(Clase, Tramo, variable) %>% mutate(conteoC = sum(conteo)) %>% mutate(porcentaje = conteo/conteoC*100)
ggplot(numero_actividades_grap, aes(x = variable, y = porcentaje, fill = Clase)) + geom_bar(stat="identity") + facet_grid(cols = vars(Tramo))
resumen_actividades_grap <- resumen_actividades %>% group_by(Clase, Tramo, variable) %>% mutate(conteoC = sum(conteo)) %>% mutate(porcentaje = conteo/conteoC*100)
ggplot(numero_actividades_grap, aes(x = variable, y = porcentaje, fill = Clase)) + geom_bar(stat="identity") + facet_grid(cols = vars(Tramo))
ggplot(resumen_actividades_grap, aes(x = variable, y = porcentaje, fill = Clase)) + geom_bar(stat="identity") + facet_grid(cols = vars(Tramo))
resumen_actividades_grap
resumen_actividades_grap %>% View()
ggplot(resumen_actividades_grap, aes(x = variable, y = porcentaje, fill = Clase)) + geom_bar(stat="identity") + facet_grid(cols = vars(Tramo)) + coord_flip()
ggplot(resumen_actividades_grap, aes(x = variable, y = porcentaje, fill = Tramo)) + geom_bar(stat="identity") + facet_grid(cols = vars(Clase)) + coord_flip()
resumen_actividades_grap
ggplot(resumen_actividades_grap, aes(x = variable, y = porcentaje, fill = Tramo)) + geom_bar(stat="identity")
ggplot(resumen_actividades_grap, aes(x = variable, y = porcentaje, fill = Tramo)) + geom_col(stat="identity")
numero_actividades_grap
numero_actividades
df_actividades
df_hogares$Tramo %>% table()
a <- df_hogares$Tramo %>% table()
a/sum(a)
# Cruzando las dos bases de datos
base_cobertura <- left_join(df_hogares_orig, cobertura,  by = c("A00"= "NUMERO DE FORMULARIO"))
df_hogares <- base_cobertura
df_hogares %>% dim()
if(dim(df_hogares)[1] == dim(df_hogares_orig)[1]){
print("La base de datos de coberturas fue cargada correctamente")
}
